
calc_3.elf:     file format elf32-littlenios2
calc_3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x0000040c memsz 0x0000040c flags r-x
    LOAD off    0x0000142c vaddr 0x0000442c paddr 0x00004430 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001434 vaddr 0x00004434 paddr 0x00004434 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00001430  2**0
                  CONTENTS
  2 .text         0000040c  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  0000442c  00004434  00001430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  0000442c  00004430  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00004434  00004434  00001434  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00004440  00004440  00001430  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000150  00000000  00000000  00001470  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c16  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006ca  00000000  00000000  000021d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000005f7  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001f0  00000000  00000000  00002e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005c5  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000052d  00000000  00000000  0000364d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00003b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00003bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004a1a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00004a1d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004a29  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004a2a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004a2b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00004a36  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004a41  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000010  00000000  00000000  00004a4c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  00004a5c  2**0
                  CONTENTS, READONLY
 26 .jdi          00004f8e  00000000  00000000  00004a6f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00054e41  00000000  00000000  000099fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
0000442c l    d  .rodata	00000000 .rodata
0000442c l    d  .rwdata	00000000 .rwdata
00004434 l    d  .bss	00000000 .bss
00004440 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../calc_3_bsp//obj/HAL/src/crt0.o
00004068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000416c l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00004378 g     F .text	0000002c alt_main
00004430 g       *ABS*	00000000 __flash_rwdata_start
000043ec g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000001c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00004098 g     F .text	0000004c dcb
00004438 g     O .bss	00000004 alt_argv
0000c42c g       *ABS*	00000000 _gp
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004270 g     F .text	00000008 .hidden __udivsi3
000043f4 g     F .text	00000038 alt_icache_flush
00004440 g       *ABS*	00000000 __bss_end
000043c8 g     F .text	00000018 alt_dcache_flush_all
00004430 g       *ABS*	00000000 __ram_rwdata_end
0000442c g       *ABS*	00000000 __ram_rodata_end
0000442c g     O .rwdata	00000004 jtag_uart_0
00004278 g     F .text	00000008 .hidden __umodsi3
00004440 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004020 g     F .text	0000004c _start
000043c4 g     F .text	00000004 alt_sys_init
0000442c g       *ABS*	00000000 __ram_rwdata_start
0000442c g       *ABS*	00000000 __ram_rodata_start
00004440 g       *ABS*	00000000 __alt_stack_base
00004434 g       *ABS*	00000000 __bss_start
000040e4 g     F .text	00000088 main
00004434 g     O .bss	00000004 alt_envp
000041dc g     F .text	00000048 .hidden __divsi3
0000442c g       *ABS*	00000000 __flash_rodata_start
0000406c g     F .text	0000002c delay
000043a4 g     F .text	00000020 alt_irq_init
0000443c g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
00004430 g       *ABS*	00000000 _edata
00004440 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004224 g     F .text	0000004c .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000401c g       .entry	00000000 _exit
000043e0 g     F .text	0000000c alt_icache_flush_all
00004280 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    4000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    4004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    4008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    400c:	00bffd16 	blt	zero,r2,4004 <_gp+0xffff7bd8>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4014:	08500814 	ori	at,at,16416
    jmp r1
    4018:	0800683a 	jmp	at

0000401c <_exit>:
    401c:	00000000 	call	0 <__reset-0x4000>

Disassembly of section .text:

00004020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    4020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    4024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    4028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    402c:	00bffd16 	blt	zero,r2,4024 <_gp+0xffff7bf8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4034:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    403c:	d6b10b14 	ori	gp,gp,50220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4044:	10910d14 	ori	r2,r2,17460

    movhi r3, %hi(__bss_end)
    4048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    404c:	18d11014 	ori	r3,r3,17472

    beq r2, r3, 1f
    4050:	10c00326 	beq	r2,r3,4060 <_start+0x40>

0:
    stw zero, (r2)
    4054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    405c:	10fffd36 	bltu	r2,r3,4054 <_gp+0xffff7c28>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4060:	00042800 	call	4280 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4064:	00043780 	call	4378 <alt_main>

00004068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4068:	003fff06 	br	4068 <_gp+0xffff7c3c>

0000406c <delay>:
#include <math.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
void delay(int a){
	volatile int i = 0;
	while(i<a*10000){
    406c:	2109c424 	muli	r4,r4,10000
#include <stdio.h>
#include <math.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
void delay(int a){
    4070:	deffff04 	addi	sp,sp,-4
	volatile int i = 0;
    4074:	d8000015 	stw	zero,0(sp)
	while(i<a*10000){
    4078:	d8800017 	ldw	r2,0(sp)
    407c:	1100040e 	bge	r2,r4,4090 <delay+0x24>
		i++;
    4080:	d8800017 	ldw	r2,0(sp)
    4084:	10800044 	addi	r2,r2,1
    4088:	d8800015 	stw	r2,0(sp)
    408c:	003ffa06 	br	4078 <_gp+0xffff7c4c>
	}
}
    4090:	dec00104 	addi	sp,sp,4
    4094:	f800283a 	ret

00004098 <dcb>:
unsigned int dcb(int decimalnum)
{
   unsigned int binarynum = 0;
    int rem, temp = 1;
    4098:	01400044 	movi	r5,1
		i++;
	}
}
unsigned int dcb(int decimalnum)
{
   unsigned int binarynum = 0;
    409c:	0005883a 	mov	r2,zero
    int rem, temp = 1;

    while (decimalnum!=0)
    {
        rem = decimalnum%2;
    40a0:	01a00034 	movhi	r6,32768
    40a4:	31800044 	addi	r6,r6,1
    40a8:	01ffff84 	movi	r7,-2
unsigned int dcb(int decimalnum)
{
   unsigned int binarynum = 0;
    int rem, temp = 1;

    while (decimalnum!=0)
    40ac:	20000c26 	beq	r4,zero,40e0 <dcb+0x48>
    {
        rem = decimalnum%2;
    40b0:	2186703a 	and	r3,r4,r6
    40b4:	1800030e 	bge	r3,zero,40c4 <dcb+0x2c>
    40b8:	18ffffc4 	addi	r3,r3,-1
    40bc:	19c6b03a 	or	r3,r3,r7
    40c0:	18c00044 	addi	r3,r3,1
        decimalnum = decimalnum / 2;
    40c4:	2010d7fa 	srli	r8,r4,31
        binarynum = binarynum + rem*temp;
    40c8:	1947383a 	mul	r3,r3,r5
        temp = temp * 10;
    40cc:	294002a4 	muli	r5,r5,10
    int rem, temp = 1;

    while (decimalnum!=0)
    {
        rem = decimalnum%2;
        decimalnum = decimalnum / 2;
    40d0:	4109883a 	add	r4,r8,r4
    40d4:	2009d07a 	srai	r4,r4,1
        binarynum = binarynum + rem*temp;
    40d8:	10c5883a 	add	r2,r2,r3
    40dc:	003ff306 	br	40ac <_gp+0xffff7c80>
        temp = temp * 10;
    }
    return binarynum;
}
    40e0:	f800283a 	ret

000040e4 <main>:


int main()
{ 
    40e4:	defffb04 	addi	sp,sp,-20
    40e8:	dcc00315 	stw	r19,12(sp)
    40ec:	dc800215 	stw	r18,8(sp)
    40f0:	dc400115 	stw	r17,4(sp)
    40f4:	dc000015 	stw	r16,0(sp)
    40f8:	dfc00415 	stw	ra,16(sp)
  unsigned int inp1, inp2, inp3, inp4, inp5, inp6;
  unsigned int out1 = 0;
    40fc:	0007883a 	mov	r3,zero
  unsigned int x;
  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_ALL_BASE, out1);
    4100:	04240014 	movui	r16,36864
	  inp1 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_1_BASE);
    4104:	04641814 	movui	r17,36960
	  inp2 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_2_BASE);
    4108:	04a41414 	movui	r18,36944
	  inp3 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_3_BASE);
    410c:	04e41014 	movui	r19,36928
{ 
  unsigned int inp1, inp2, inp3, inp4, inp5, inp6;
  unsigned int out1 = 0;
  unsigned int x;
  while (1){
	  IOWR_ALTERA_AVALON_PIO_DATA(OUTPUT_ALL_BASE, out1);
    4110:	80c00035 	stwio	r3,0(r16)
	  inp1 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_1_BASE);
    4114:	89000037 	ldwio	r4,0(r17)
	  inp2 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_2_BASE);
    4118:	91400037 	ldwio	r5,0(r18)
	  inp3 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_3_BASE);
    411c:	9a400037 	ldwio	r9,0(r19)
	  inp4 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_4_BASE);
    4120:	00a40c14 	movui	r2,36912
    4124:	12000037 	ldwio	r8,0(r2)
	  inp5 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_5_BASE);
    4128:	00a40814 	movui	r2,36896
    412c:	11c00037 	ldwio	r7,0(r2)
	  inp6 = IORD_ALTERA_AVALON_PIO_DATA(INPUT_6_BASE);
    4130:	00a40414 	movui	r2,36880
    4134:	11800037 	ldwio	r6,0(r2)
	  if (inp3 == 1){
    4138:	00800044 	movi	r2,1
    413c:	4880011e 	bne	r9,r2,4144 <main+0x60>
		  out1 = inp1 + inp2;
    4140:	2907883a 	add	r3,r5,r4

	  }
	  if (inp4 == 1){
    4144:	4080011e 	bne	r8,r2,414c <main+0x68>
		  out1 = inp1 - inp2;
    4148:	2147c83a 	sub	r3,r4,r5

	  }
	  if (inp5 == 1){
    414c:	3880011e 	bne	r7,r2,4154 <main+0x70>
	  		  out1 = inp1 * inp2;
    4150:	2907383a 	mul	r3,r5,r4

	  }
	  if (inp6 == 1){
    4154:	3080021e 	bne	r6,r2,4160 <main+0x7c>
	  		  out1 = inp1 / inp2;
    4158:	00042700 	call	4270 <__udivsi3>
    415c:	1007883a 	mov	r3,r2

	  }
		delay(500);
    4160:	01007d04 	movi	r4,500
    4164:	000406c0 	call	406c <delay>

  }
    4168:	003fe906 	br	4110 <_gp+0xffff7ce4>

0000416c <udivmodsi4>:
    416c:	2900182e 	bgeu	r5,r4,41d0 <udivmodsi4+0x64>
    4170:	28001716 	blt	r5,zero,41d0 <udivmodsi4+0x64>
    4174:	00800804 	movi	r2,32
    4178:	00c00044 	movi	r3,1
    417c:	00000206 	br	4188 <udivmodsi4+0x1c>
    4180:	10001126 	beq	r2,zero,41c8 <udivmodsi4+0x5c>
    4184:	28000516 	blt	r5,zero,419c <udivmodsi4+0x30>
    4188:	294b883a 	add	r5,r5,r5
    418c:	10bfffc4 	addi	r2,r2,-1
    4190:	18c7883a 	add	r3,r3,r3
    4194:	293ffa36 	bltu	r5,r4,4180 <_gp+0xffff7d54>
    4198:	18000b26 	beq	r3,zero,41c8 <udivmodsi4+0x5c>
    419c:	0005883a 	mov	r2,zero
    41a0:	21400236 	bltu	r4,r5,41ac <udivmodsi4+0x40>
    41a4:	2149c83a 	sub	r4,r4,r5
    41a8:	10c4b03a 	or	r2,r2,r3
    41ac:	1806d07a 	srli	r3,r3,1
    41b0:	280ad07a 	srli	r5,r5,1
    41b4:	183ffa1e 	bne	r3,zero,41a0 <_gp+0xffff7d74>
    41b8:	3000011e 	bne	r6,zero,41c0 <udivmodsi4+0x54>
    41bc:	f800283a 	ret
    41c0:	2005883a 	mov	r2,r4
    41c4:	f800283a 	ret
    41c8:	0005883a 	mov	r2,zero
    41cc:	003ffa06 	br	41b8 <_gp+0xffff7d8c>
    41d0:	00c00044 	movi	r3,1
    41d4:	0005883a 	mov	r2,zero
    41d8:	003ff106 	br	41a0 <_gp+0xffff7d74>

000041dc <__divsi3>:
    41dc:	deffff04 	addi	sp,sp,-4
    41e0:	dfc00015 	stw	ra,0(sp)
    41e4:	20000916 	blt	r4,zero,420c <__divsi3+0x30>
    41e8:	000f883a 	mov	r7,zero
    41ec:	28000a16 	blt	r5,zero,4218 <__divsi3+0x3c>
    41f0:	000d883a 	mov	r6,zero
    41f4:	000416c0 	call	416c <udivmodsi4>
    41f8:	38000126 	beq	r7,zero,4200 <__divsi3+0x24>
    41fc:	0085c83a 	sub	r2,zero,r2
    4200:	dfc00017 	ldw	ra,0(sp)
    4204:	dec00104 	addi	sp,sp,4
    4208:	f800283a 	ret
    420c:	0109c83a 	sub	r4,zero,r4
    4210:	01c00044 	movi	r7,1
    4214:	283ff60e 	bge	r5,zero,41f0 <_gp+0xffff7dc4>
    4218:	014bc83a 	sub	r5,zero,r5
    421c:	39c0005c 	xori	r7,r7,1
    4220:	003ff306 	br	41f0 <_gp+0xffff7dc4>

00004224 <__modsi3>:
    4224:	20000316 	blt	r4,zero,4234 <__modsi3+0x10>
    4228:	28000c16 	blt	r5,zero,425c <__modsi3+0x38>
    422c:	01800044 	movi	r6,1
    4230:	000416c1 	jmpi	416c <udivmodsi4>
    4234:	deffff04 	addi	sp,sp,-4
    4238:	dfc00015 	stw	ra,0(sp)
    423c:	0109c83a 	sub	r4,zero,r4
    4240:	28000916 	blt	r5,zero,4268 <__modsi3+0x44>
    4244:	01800044 	movi	r6,1
    4248:	000416c0 	call	416c <udivmodsi4>
    424c:	0085c83a 	sub	r2,zero,r2
    4250:	dfc00017 	ldw	ra,0(sp)
    4254:	dec00104 	addi	sp,sp,4
    4258:	f800283a 	ret
    425c:	014bc83a 	sub	r5,zero,r5
    4260:	01800044 	movi	r6,1
    4264:	000416c1 	jmpi	416c <udivmodsi4>
    4268:	014bc83a 	sub	r5,zero,r5
    426c:	003ff506 	br	4244 <_gp+0xffff7e18>

00004270 <__udivsi3>:
    4270:	000d883a 	mov	r6,zero
    4274:	000416c1 	jmpi	416c <udivmodsi4>

00004278 <__umodsi3>:
    4278:	01800044 	movi	r6,1
    427c:	000416c1 	jmpi	416c <udivmodsi4>

00004280 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4280:	deffff04 	addi	sp,sp,-4
    4284:	dfc00015 	stw	ra,0(sp)
    4288:	00c00034 	movhi	r3,0
    428c:	18d10b04 	addi	r3,r3,17452
    4290:	01000034 	movhi	r4,0
    4294:	21110c04 	addi	r4,r4,17456

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4298:	1900061e 	bne	r3,r4,42b4 <alt_load+0x34>
    429c:	00c00034 	movhi	r3,0
    42a0:	18d00804 	addi	r3,r3,16416
    42a4:	01000034 	movhi	r4,0
    42a8:	21100804 	addi	r4,r4,16416
    42ac:	1900141e 	bne	r3,r4,4300 <alt_load+0x80>
    42b0:	00000d06 	br	42e8 <alt_load+0x68>
    42b4:	01400034 	movhi	r5,0
    42b8:	29510c04 	addi	r5,r5,17456
    42bc:	00bfff04 	movi	r2,-4
    42c0:	28cbc83a 	sub	r5,r5,r3
    42c4:	288a703a 	and	r5,r5,r2
    42c8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    42cc:	117ff326 	beq	r2,r5,429c <_gp+0xffff7e70>
    42d0:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    42d4:	39c00017 	ldw	r7,0(r7)
    42d8:	188d883a 	add	r6,r3,r2
    42dc:	10800104 	addi	r2,r2,4
    42e0:	31c00015 	stw	r7,0(r6)
    42e4:	003ff906 	br	42cc <_gp+0xffff7ea0>
    42e8:	00c00034 	movhi	r3,0
    42ec:	18d10b04 	addi	r3,r3,17452
    42f0:	01000034 	movhi	r4,0
    42f4:	21110b04 	addi	r4,r4,17452

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    42f8:	1900121e 	bne	r3,r4,4344 <alt_load+0xc4>
    42fc:	00000d06 	br	4334 <alt_load+0xb4>
    4300:	01400034 	movhi	r5,0
    4304:	29500804 	addi	r5,r5,16416
    4308:	00bfff04 	movi	r2,-4
    430c:	28cbc83a 	sub	r5,r5,r3
    4310:	288a703a 	and	r5,r5,r2
    4314:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4318:	117ff326 	beq	r2,r5,42e8 <_gp+0xffff7ebc>
    431c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    4320:	39c00017 	ldw	r7,0(r7)
    4324:	188d883a 	add	r6,r3,r2
    4328:	10800104 	addi	r2,r2,4
    432c:	31c00015 	stw	r7,0(r6)
    4330:	003ff906 	br	4318 <_gp+0xffff7eec>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4334:	00043c80 	call	43c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4338:	dfc00017 	ldw	ra,0(sp)
    433c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4340:	00043e01 	jmpi	43e0 <alt_icache_flush_all>
    4344:	01400034 	movhi	r5,0
    4348:	29510b04 	addi	r5,r5,17452
    434c:	00bfff04 	movi	r2,-4
    4350:	28cbc83a 	sub	r5,r5,r3
    4354:	288a703a 	and	r5,r5,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4358:	0005883a 	mov	r2,zero
  {
    while( to != end )
    435c:	117ff526 	beq	r2,r5,4334 <_gp+0xffff7f08>
    4360:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    4364:	39c00017 	ldw	r7,0(r7)
    4368:	188d883a 	add	r6,r3,r2
    436c:	10800104 	addi	r2,r2,4
    4370:	31c00015 	stw	r7,0(r6)
    4374:	003ff906 	br	435c <_gp+0xffff7f30>

00004378 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4378:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    437c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4380:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4384:	00043a40 	call	43a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4388:	00043c40 	call	43c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    438c:	d1200417 	ldw	r4,-32752(gp)
    4390:	d1600317 	ldw	r5,-32756(gp)
    4394:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4398:	dfc00017 	ldw	ra,0(sp)
    439c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    43a0:	00040e41 	jmpi	40e4 <main>

000043a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    43a4:	deffff04 	addi	sp,sp,-4
    43a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    43ac:	00043ec0 	call	43ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    43b0:	00800044 	movi	r2,1
    43b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    43b8:	dfc00017 	ldw	ra,0(sp)
    43bc:	dec00104 	addi	sp,sp,4
    43c0:	f800283a 	ret

000043c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    43c4:	f800283a 	ret

000043c8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    43c8:	0005883a 	mov	r2,zero
    43cc:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    43d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    43d4:	10800804 	addi	r2,r2,32
    43d8:	10fffd1e 	bne	r2,r3,43d0 <_gp+0xffff7fa4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    43dc:	f800283a 	ret

000043e0 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    43e0:	0009883a 	mov	r4,zero
    43e4:	01440004 	movi	r5,4096
    43e8:	00043f41 	jmpi	43f4 <alt_icache_flush>

000043ec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    43ec:	000170fa 	wrctl	ienable,zero
    43f0:	f800283a 	ret

000043f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    43f4:	00840004 	movi	r2,4096
    43f8:	1140012e 	bgeu	r2,r5,4400 <alt_icache_flush+0xc>
    43fc:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    4400:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4404:	2005883a 	mov	r2,r4
    4408:	1140032e 	bgeu	r2,r5,4418 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    440c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4410:	10800804 	addi	r2,r2,32
    4414:	003ffc06 	br	4408 <_gp+0xffff7fdc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4418:	210007cc 	andi	r4,r4,31
    441c:	20000126 	beq	r4,zero,4424 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    4420:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    4424:	0000203a 	flushp
    4428:	f800283a 	ret
