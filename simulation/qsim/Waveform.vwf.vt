// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2019 14:13:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    bin2bcd
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module bin2bcd_vlg_sample_tst(
	bin,
	clk1,
	sampler_tx
);
input [7:0] bin;
input  clk1;
output sampler_tx;

reg sample;
time current_time;
always @(bin or clk1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module bin2bcd_vlg_check_tst (
	ones,
	tens,
	sampler_rx
);
input [3:0] ones;
input [3:0] tens;
input sampler_rx;

reg [3:0] ones_expected;
reg [3:0] tens_expected;

reg [3:0] ones_prev;
reg [3:0] tens_prev;

reg [3:0] ones_expected_prev;
reg [3:0] tens_expected_prev;

reg [3:0] last_ones_exp;
reg [3:0] last_tens_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ones_prev = ones;
	tens_prev = tens;
end

// update expected /o prevs

always @(trigger)
begin
	ones_expected_prev = ones_expected;
	tens_expected_prev = tens_expected;
end



// expected ones[0]
initial
begin
	ones_expected[0] = 1'bX;
end 

// expected ones[1]
initial
begin
	ones_expected[1] = 1'bX;
end 

// expected ones[2]
initial
begin
	ones_expected[2] = 1'bX;
end 

// expected ones[3]
initial
begin
	ones_expected[3] = 1'bX;
end 

// expected tens[0]
initial
begin
	tens_expected[0] = 1'bX;
end 

// expected tens[1]
initial
begin
	tens_expected[1] = 1'bX;
end 

// expected tens[2]
initial
begin
	tens_expected[2] = 1'bX;
end 

// expected tens[3]
initial
begin
	tens_expected[3] = 1'bX;
end 
// generate trigger
always @(ones_expected or ones or tens_expected or tens)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ones = %b | expected tens = %b | ",ones_expected_prev,tens_expected_prev);
	$display("| real ones = %b | real tens = %b | ",ones_prev,tens_prev);
`endif
	if (
		( ones_expected_prev[0] !== 1'bx ) && ( ones_prev[0] !== ones_expected_prev[0] )
		&& ((ones_expected_prev[0] !== last_ones_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ones[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ones_expected_prev);
		$display ("     Real value = %b", ones_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ones_exp[0] = ones_expected_prev[0];
	end
	if (
		( ones_expected_prev[1] !== 1'bx ) && ( ones_prev[1] !== ones_expected_prev[1] )
		&& ((ones_expected_prev[1] !== last_ones_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ones[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ones_expected_prev);
		$display ("     Real value = %b", ones_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ones_exp[1] = ones_expected_prev[1];
	end
	if (
		( ones_expected_prev[2] !== 1'bx ) && ( ones_prev[2] !== ones_expected_prev[2] )
		&& ((ones_expected_prev[2] !== last_ones_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ones[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ones_expected_prev);
		$display ("     Real value = %b", ones_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ones_exp[2] = ones_expected_prev[2];
	end
	if (
		( ones_expected_prev[3] !== 1'bx ) && ( ones_prev[3] !== ones_expected_prev[3] )
		&& ((ones_expected_prev[3] !== last_ones_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ones[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ones_expected_prev);
		$display ("     Real value = %b", ones_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ones_exp[3] = ones_expected_prev[3];
	end
	if (
		( tens_expected_prev[0] !== 1'bx ) && ( tens_prev[0] !== tens_expected_prev[0] )
		&& ((tens_expected_prev[0] !== last_tens_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tens[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tens_expected_prev);
		$display ("     Real value = %b", tens_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tens_exp[0] = tens_expected_prev[0];
	end
	if (
		( tens_expected_prev[1] !== 1'bx ) && ( tens_prev[1] !== tens_expected_prev[1] )
		&& ((tens_expected_prev[1] !== last_tens_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tens[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tens_expected_prev);
		$display ("     Real value = %b", tens_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tens_exp[1] = tens_expected_prev[1];
	end
	if (
		( tens_expected_prev[2] !== 1'bx ) && ( tens_prev[2] !== tens_expected_prev[2] )
		&& ((tens_expected_prev[2] !== last_tens_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tens[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tens_expected_prev);
		$display ("     Real value = %b", tens_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tens_exp[2] = tens_expected_prev[2];
	end
	if (
		( tens_expected_prev[3] !== 1'bx ) && ( tens_prev[3] !== tens_expected_prev[3] )
		&& ((tens_expected_prev[3] !== last_tens_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tens[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tens_expected_prev);
		$display ("     Real value = %b", tens_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_tens_exp[3] = tens_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module bin2bcd_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] bin;
reg clk1;
// wires                                               
wire [3:0] ones;
wire [3:0] tens;

wire sampler;                             

// assign statements (if any)                          
bin2bcd i1 (
// port map - connection between master ports and signals/registers   
	.bin(bin),
	.clk1(clk1),
	.ones(ones),
	.tens(tens)
);

// bin[0]
initial
begin
	bin[0] = 1'b0;
end 

// bin[1]
initial
begin
	bin[1] = 1'b0;
	bin[1] = #40000 1'b1;
	bin[1] = #220000 1'b0;
end 

// bin[2]
initial
begin
	bin[2] = 1'b0;
	bin[2] = #40000 1'b1;
	bin[2] = #230000 1'b0;
end 

// bin[3]
initial
begin
	bin[3] = 1'b0;
	bin[3] = #40000 1'b1;
	bin[3] = #220000 1'b0;
end 

// bin[4]
initial
begin
	bin[4] = 1'b0;
	bin[4] = #40000 1'b1;
	bin[4] = #220000 1'b0;
end 

// bin[5]
initial
begin
	bin[5] = 1'b0;
end 

// bin[6]
initial
begin
	bin[6] = 1'b0;
end 

// bin[7]
initial
begin
	bin[7] = 1'b0;
end 

// clk1
initial
begin
	clk1 = 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #25000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #20000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #25000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #25000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #35000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #20000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #15000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #10000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #10000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #15000 1'b1;
	clk1 = #5000 1'b0;
	clk1 = #5000 1'b1;
	clk1 = #5000 1'b0;
end 

bin2bcd_vlg_sample_tst tb_sample (
	.bin(bin),
	.clk1(clk1),
	.sampler_tx(sampler)
);

bin2bcd_vlg_check_tst tb_out(
	.ones(ones),
	.tens(tens),
	.sampler_rx(sampler)
);
endmodule

